# coding: utf-8

"""
    KomMonitor Data Access API

    erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.

    The version of the OpenAPI document: 0.0.1
    Contact: christian.danowski-buhren@hs-bochum.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.indicator_metadata_patch_input_type import IndicatorMetadataPATCHInputType

class TestIndicatorMetadataPATCHInputType(unittest.TestCase):
    """IndicatorMetadataPATCHInputType unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IndicatorMetadataPATCHInputType:
        """Test IndicatorMetadataPATCHInputType
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IndicatorMetadataPATCHInputType`
        """
        model = IndicatorMetadataPATCHInputType()
        if include_optional:
            return IndicatorMetadataPATCHInputType(
                abbreviation = '',
                allowed_roles = [
                    ''
                    ],
                characteristic_value = '',
                creation_type = 'INSERTION',
                dataset_name = '',
                default_classification_mapping = openapi_client.models.default_classification_mapping_type.DefaultClassificationMappingType(
                    color_brewer_scheme_name = '', 
                    items = [
                        openapi_client.models.default_classification_mapping_item_type.DefaultClassificationMappingItemType(
                            default_color_as_hex = '', 
                            default_custom_rating = '', )
                        ], ),
                indicator_type = 'STATUS_ABSOLUTE',
                interpretation = '',
                is_headline_indicator = True,
                lowest_spatial_unit_for_computation = '',
                metadata = openapi_client.models.common_metadata_type.CommonMetadataType(
                    contact = '', 
                    databasis = '', 
                    datasource = '', 
                    description = '', 
                    last_update = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    literature = '', 
                    note = '', 
                    srid_epsg = 1.337, 
                    update_interval = 'ARBITRARY', ),
                process_description = '',
                reference_date_note = '',
                display_order = 1.337,
                refrences_to_georesources = [
                    openapi_client.models.indicator_post_input_type_refrences_to_georesources.IndicatorPOSTInputTypeRefrencesToGeoresources(
                        georesource_id = '', 
                        reference_description = '', )
                    ],
                refrences_to_other_indicators = [
                    openapi_client.models.indicator_post_input_type_refrences_to_other_indicators.IndicatorPOSTInputTypeRefrencesToOtherIndicators(
                        indicator_id = '', 
                        reference_description = '', )
                    ],
                tags = [
                    ''
                    ],
                topic_reference = '',
                unit = ''
            )
        else:
            return IndicatorMetadataPATCHInputType(
                abbreviation = '',
                allowed_roles = [
                    ''
                    ],
                interpretation = '',
                is_headline_indicator = True,
                metadata = openapi_client.models.common_metadata_type.CommonMetadataType(
                    contact = '', 
                    databasis = '', 
                    datasource = '', 
                    description = '', 
                    last_update = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    literature = '', 
                    note = '', 
                    srid_epsg = 1.337, 
                    update_interval = 'ARBITRARY', ),
                process_description = '',
                tags = [
                    ''
                    ],
                topic_reference = '',
                unit = '',
        )
        """

    def testIndicatorMetadataPATCHInputType(self):
        """Test IndicatorMetadataPATCHInputType"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
