# coding: utf-8

"""
    KomMonitor Data Access API

    erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.

    The version of the OpenAPI document: 0.0.1
    Contact: christian.danowski-buhren@hs-bochum.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.indicator_overview_type import IndicatorOverviewType

class TestIndicatorOverviewType(unittest.TestCase):
    """IndicatorOverviewType unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IndicatorOverviewType:
        """Test IndicatorOverviewType
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IndicatorOverviewType`
        """
        model = IndicatorOverviewType()
        if include_optional:
            return IndicatorOverviewType(
                abbreviation = '',
                allowed_roles = [
                    ''
                    ],
                applicable_dates = [
                    ''
                    ],
                applicable_spatial_units = [
                    openapi_client.models.indicator_spatial_unit_join_item.IndicatorSpatialUnitJoinItem(
                        allowed_roles = [
                            ''
                            ], 
                        spatial_unit_id = '', 
                        spatial_unit_name = '', 
                        user_permissions = [
                            ''
                            ], )
                    ],
                characteristic_value = '',
                creation_type = 'INSERTION',
                default_classification_mapping = openapi_client.models.default_classification_mapping_type.DefaultClassificationMappingType(
                    color_brewer_scheme_name = '', 
                    items = [
                        openapi_client.models.default_classification_mapping_item_type.DefaultClassificationMappingItemType(
                            default_color_as_hex = '', 
                            default_custom_rating = '', )
                        ], ),
                indicator_id = '',
                indicator_name = '',
                indicator_type = 'STATUS_ABSOLUTE',
                interpretation = '',
                is_headline_indicator = True,
                lowest_spatial_unit_for_computation = '',
                metadata = openapi_client.models.common_metadata_type.CommonMetadataType(
                    contact = '', 
                    databasis = '', 
                    datasource = '', 
                    description = '', 
                    last_update = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    literature = '', 
                    note = '', 
                    srid_epsg = 1.337, 
                    update_interval = 'ARBITRARY', ),
                ogc_services = [
                    openapi_client.models.ogc_services_type.OgcServicesType(
                        default_style_name = '', 
                        spatial_unit = '', 
                        wfs_url = '', 
                        wms_url = '', )
                    ],
                process_description = '',
                reference_date_note = '',
                display_order = 1.337,
                referenced_georesources = [
                    openapi_client.models.georesource_reference_type.GeoresourceReferenceType(
                        referenced_georesource_description = '', 
                        referenced_georesource_id = '', 
                        referenced_georesource_name = '', )
                    ],
                referenced_indicators = [
                    openapi_client.models.indicator_reference_type.IndicatorReferenceType(
                        referenced_indicator_description = '', 
                        referenced_indicator_id = '', 
                        referenced_indicator_name = '', )
                    ],
                tags = [
                    ''
                    ],
                topic_reference = '',
                unit = '',
                user_permissions = [
                    ''
                    ]
            )
        else:
            return IndicatorOverviewType(
                abbreviation = '',
                applicable_dates = [
                    ''
                    ],
                applicable_spatial_units = [
                    openapi_client.models.indicator_spatial_unit_join_item.IndicatorSpatialUnitJoinItem(
                        allowed_roles = [
                            ''
                            ], 
                        spatial_unit_id = '', 
                        spatial_unit_name = '', 
                        user_permissions = [
                            ''
                            ], )
                    ],
                characteristic_value = '',
                creation_type = 'INSERTION',
                indicator_id = '',
                indicator_name = '',
                interpretation = '',
                is_headline_indicator = True,
                metadata = openapi_client.models.common_metadata_type.CommonMetadataType(
                    contact = '', 
                    databasis = '', 
                    datasource = '', 
                    description = '', 
                    last_update = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    literature = '', 
                    note = '', 
                    srid_epsg = 1.337, 
                    update_interval = 'ARBITRARY', ),
                ogc_services = [
                    openapi_client.models.ogc_services_type.OgcServicesType(
                        default_style_name = '', 
                        spatial_unit = '', 
                        wfs_url = '', 
                        wms_url = '', )
                    ],
                process_description = '',
                tags = [
                    ''
                    ],
                topic_reference = '',
                unit = '',
        )
        """

    def testIndicatorOverviewType(self):
        """Test IndicatorOverviewType"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
