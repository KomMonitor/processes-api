# coding: utf-8

"""
    KomMonitor Data Access API

    erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.

    The version of the OpenAPI document: 0.0.1
    Contact: christian.danowski-buhren@hs-bochum.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.indicators_controller_api import IndicatorsControllerApi


class TestIndicatorsControllerApi(unittest.TestCase):
    """IndicatorsControllerApi unit test stubs"""

    def setUp(self) -> None:
        self.api = IndicatorsControllerApi()

    def tearDown(self) -> None:
        pass

    def test_add_indicator_as_body(self) -> None:
        """Test case for add_indicator_as_body

        Add a new indicator dataset
        """
        pass

    def test_delete_indicator_by_id(self) -> None:
        """Test case for delete_indicator_by_id

        Delete the features/contents of the selected indicator dataset
        """
        pass

    def test_delete_indicator_by_id_and_spatial_unit_id(self) -> None:
        """Test case for delete_indicator_by_id_and_spatial_unit_id

        Delete the features/contents of the selected indicator dataset for the selected spatial unit
        """
        pass

    def test_delete_indicator_by_id_and_year_and_month(self) -> None:
        """Test case for delete_indicator_by_id_and_year_and_month

        Delete the features/contents of the selected indicator dataset, selected by year and month
        """
        pass

    def test_get_indicator_by_id(self) -> None:
        """Test case for get_indicator_by_id

        retrieve information about the selected indicator
        """
        pass

    def test_get_indicator_by_spatial_unit_id_and_id(self) -> None:
        """Test case for get_indicator_by_spatial_unit_id_and_id

        retrieve the indicator for the selected spatial unit as GeoJSON
        """
        pass

    def test_get_indicator_by_spatial_unit_id_and_id_and_year_and_month(self) -> None:
        """Test case for get_indicator_by_spatial_unit_id_and_id_and_year_and_month

        retrieve the indicator for the selected spatial unit, year and month as GeoJSON
        """
        pass

    def test_get_indicator_by_spatial_unit_id_and_id_and_year_and_month_without_geometry(self) -> None:
        """Test case for get_indicator_by_spatial_unit_id_and_id_and_year_and_month_without_geometry

        retrieve the indicator values and other properties for the selected spatial unit, year and month. It does not include the spatial geometries!
        """
        pass

    def test_get_indicator_by_spatial_unit_id_and_id_without_geometry(self) -> None:
        """Test case for get_indicator_by_spatial_unit_id_and_id_without_geometry

        retrieve the indicator values and other properties for the selected spatial unit. It does not include the spatial geometries!
        """
        pass

    def test_get_indicators(self) -> None:
        """Test case for get_indicators

        retrieve information about available indicators
        """
        pass

    def test_update_indicator_as_body(self) -> None:
        """Test case for update_indicator_as_body

        Modify/Update the contents of the selected indicator dataset
        """
        pass

    def test_update_indicator_display_order(self) -> None:
        """Test case for update_indicator_display_order

        Update displayOrder for submitted indicators
        """
        pass

    def test_update_indicator_metadata_as_body(self) -> None:
        """Test case for update_indicator_metadata_as_body

        Modify/Update the metadata of the selected indicator dataset
        """
        pass

    def test_update_indicator_roles_using_patch(self) -> None:
        """Test case for update_indicator_roles_using_patch

        Modify/Update the selected indicator dataset
        """
        pass


if __name__ == '__main__':
    unittest.main()
