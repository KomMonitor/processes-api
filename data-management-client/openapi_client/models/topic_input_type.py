# coding: utf-8

"""
    KomMonitor Data Access API

    erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.

    The version of the OpenAPI document: 0.0.1
    Contact: christian.danowski-buhren@hs-bochum.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TopicInputType(BaseModel):
    """
    TopicInputType
    """ # noqa: E501
    sub_topics: Optional[List[TopicInputType]] = Field(default=None, description="optional list of subTopics", alias="subTopics")
    topic_description: StrictStr = Field(description="short description of the topic", alias="topicDescription")
    topic_id: Optional[StrictStr] = Field(default=None, description="the topic identifier", alias="topicId")
    topic_name: StrictStr = Field(description="the topic name", alias="topicName")
    topic_resource: Optional[StrictStr] = Field(default=None, description="topic resource indicating if the topic object corresponds to an indicator or to a georesource", alias="topicResource")
    topic_type: StrictStr = Field(description="topic type indicating if the topic object is a subtopic or a main topic - only topics of type 'sub' shall be subTopics of topics with type 'main'", alias="topicType")
    __properties: ClassVar[List[str]] = ["subTopics", "topicDescription", "topicId", "topicName", "topicResource", "topicType"]

    @field_validator('topic_resource')
    def topic_resource_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('indicator', 'georesource'):
            raise ValueError("must be one of enum values ('indicator', 'georesource')")
        return value

    @field_validator('topic_type')
    def topic_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('main', 'sub'):
            raise ValueError("must be one of enum values ('main', 'sub')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TopicInputType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sub_topics (list)
        _items = []
        if self.sub_topics:
            for _item in self.sub_topics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subTopics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TopicInputType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subTopics": [TopicInputType.from_dict(_item) for _item in obj.get("subTopics")] if obj.get("subTopics") is not None else None,
            "topicDescription": obj.get("topicDescription"),
            "topicId": obj.get("topicId"),
            "topicName": obj.get("topicName"),
            "topicResource": obj.get("topicResource"),
            "topicType": obj.get("topicType")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
TopicInputType.model_rebuild(raise_errors=False)

