# coding: utf-8

"""
    KomMonitor Data Access API

    erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.

    The version of the OpenAPI document: 0.0.1
    Contact: christian.danowski-buhren@hs-bochum.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from openapi_client.models.common_metadata_type import CommonMetadataType
from openapi_client.models.period_of_validity_type import PeriodOfValidityType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SpatialUnitOverviewType(BaseModel):
    """
    SpatialUnitOverviewType
    """ # noqa: E501
    allowed_roles: List[StrictStr] = Field(description="list of role identifiers that have read access rights for this dataset", alias="allowedRoles")
    available_periods_of_validity: Optional[List[PeriodOfValidityType]] = Field(default=None, alias="availablePeriodsOfValidity")
    metadata: CommonMetadataType
    next_lower_hierarchy_level: StrictStr = Field(description="the identifier/name of the spatial unit level that contains the features of the nearest lower hierarchy level", alias="nextLowerHierarchyLevel")
    next_upper_hierarchy_level: StrictStr = Field(description="the identifier/name of the spatial unit level that contains the features of the nearest upper hierarchy level", alias="nextUpperHierarchyLevel")
    spatial_unit_id: StrictStr = Field(description="the unique identifier of the spatial unit level the features apply to", alias="spatialUnitId")
    spatial_unit_level: StrictStr = Field(description="the name of the spatial unit level the features apply to", alias="spatialUnitLevel")
    wfs_url: StrictStr = Field(description="the URL of a running WFS instance serving the spatial features of the associated dataset", alias="wfsUrl")
    wms_url: StrictStr = Field(description="the URL of a running WMS instance serving the spatial features of the associated dataset", alias="wmsUrl")
    user_permissions: Optional[List[StrictStr]] = Field(default=None, description="List of permissions that are effective on this dataset for the current user", alias="userPermissions")
    __properties: ClassVar[List[str]] = ["allowedRoles", "availablePeriodsOfValidity", "metadata", "nextLowerHierarchyLevel", "nextUpperHierarchyLevel", "spatialUnitId", "spatialUnitLevel", "wfsUrl", "wmsUrl", "userPermissions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SpatialUnitOverviewType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in available_periods_of_validity (list)
        _items = []
        if self.available_periods_of_validity:
            for _item in self.available_periods_of_validity:
                if _item:
                    _items.append(_item.to_dict())
            _dict['availablePeriodsOfValidity'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SpatialUnitOverviewType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedRoles": obj.get("allowedRoles"),
            "availablePeriodsOfValidity": [PeriodOfValidityType.from_dict(_item) for _item in obj.get("availablePeriodsOfValidity")] if obj.get("availablePeriodsOfValidity") is not None else None,
            "metadata": CommonMetadataType.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "nextLowerHierarchyLevel": obj.get("nextLowerHierarchyLevel"),
            "nextUpperHierarchyLevel": obj.get("nextUpperHierarchyLevel"),
            "spatialUnitId": obj.get("spatialUnitId"),
            "spatialUnitLevel": obj.get("spatialUnitLevel"),
            "wfsUrl": obj.get("wfsUrl"),
            "wmsUrl": obj.get("wmsUrl"),
            "userPermissions": obj.get("userPermissions")
        })
        return _obj


