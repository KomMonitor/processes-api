# coding: utf-8

"""
    KomMonitor Data Access API

    erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.

    The version of the OpenAPI document: 0.0.1
    Contact: christian.danowski-buhren@hs-bochum.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OgcServicesType(BaseModel):
    """
    OgcServicesType
    """ # noqa: E501
    default_style_name: StrictStr = Field(description="the name of the default style (SLD) that is published and applied to the associated dataset", alias="defaultStyleName")
    spatial_unit: StrictStr = Field(description="the name of the spatial unit", alias="spatialUnit")
    wfs_url: StrictStr = Field(description="the URL of a running WFS instance serving the spatial features of the associated dataset", alias="wfsUrl")
    wms_url: StrictStr = Field(description="the URL of a running WMS instance serving the spatial features of the associated dataset", alias="wmsUrl")
    __properties: ClassVar[List[str]] = ["defaultStyleName", "spatialUnit", "wfsUrl", "wmsUrl"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OgcServicesType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OgcServicesType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultStyleName": obj.get("defaultStyleName"),
            "spatialUnit": obj.get("spatialUnit"),
            "wfsUrl": obj.get("wfsUrl"),
            "wmsUrl": obj.get("wmsUrl")
        })
        return _obj


