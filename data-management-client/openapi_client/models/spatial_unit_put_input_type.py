# coding: utf-8

"""
    KomMonitor Data Access API

    erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.

    The version of the OpenAPI document: 0.0.1
    Contact: christian.danowski-buhren@hs-bochum.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from openapi_client.models.period_of_validity_type import PeriodOfValidityType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SpatialUnitPUTInputType(BaseModel):
    """
    SpatialUnitPUTInputType
    """ # noqa: E501
    geo_json_string: StrictStr = Field(description="a valid GeoJSON string containing the features consisting of a geometry and a unique identifier as property 'uuid'", alias="geoJsonString")
    period_of_validity: PeriodOfValidityType = Field(alias="periodOfValidity")
    is_partial_update: StrictBool = Field(description="if set to TRUE, then a partial upload of geometries is possible. Missing features that are already in the database will then not be deleted", alias="isPartialUpdate")
    __properties: ClassVar[List[str]] = ["geoJsonString", "periodOfValidity", "isPartialUpdate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SpatialUnitPUTInputType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of period_of_validity
        if self.period_of_validity:
            _dict['periodOfValidity'] = self.period_of_validity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SpatialUnitPUTInputType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "geoJsonString": obj.get("geoJsonString"),
            "periodOfValidity": PeriodOfValidityType.from_dict(obj.get("periodOfValidity")) if obj.get("periodOfValidity") is not None else None,
            "isPartialUpdate": obj.get("isPartialUpdate")
        })
        return _obj


