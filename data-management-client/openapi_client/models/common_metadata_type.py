# coding: utf-8

"""
    KomMonitor Data Access API

    erster Entwurf einer Datenzugriffs-API, die den Zugriff auf die KomMonitor-Datenhaltungsschicht kapselt.

    The version of the OpenAPI document: 0.0.1
    Contact: christian.danowski-buhren@hs-bochum.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CommonMetadataType(BaseModel):
    """
    CommonMetadataType
    """ # noqa: E501
    contact: StrictStr = Field(description="contact details where additional information can be achieved")
    databasis: Optional[StrictStr] = Field(default=None, description="information about data used as a basis to generate the dataset")
    datasource: StrictStr = Field(description="information about the origin/source of the dataset")
    description: StrictStr = Field(description="description of the dataset")
    last_update: Optional[date] = Field(default=None, description="a timestamp representing the lastUpdate according to ISO 8601 (e.g. 2018-01-30)", alias="lastUpdate")
    literature: Optional[StrictStr] = Field(default=None, description="an optional hint to literature about the dataset (e.g. URL or book/article name)")
    note: Optional[StrictStr] = Field(default=None, description="an optional note with background information about the dataset")
    srid_epsg: Optional[Union[StrictFloat, StrictInt]] = Field(description="the coordinate reference system of the dataset as EPSG code", alias="sridEPSG")
    update_interval: StrictStr = Field(alias="updateInterval")
    __properties: ClassVar[List[str]] = ["contact", "databasis", "datasource", "description", "lastUpdate", "literature", "note", "sridEPSG", "updateInterval"]

    @field_validator('update_interval')
    def update_interval_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ARBITRARY', 'MONTHLY', 'QUARTERLY', 'HALF_YEARLY', 'YEARLY', 'DAILY', 'WEEKLY'):
            raise ValueError("must be one of enum values ('ARBITRARY', 'MONTHLY', 'QUARTERLY', 'HALF_YEARLY', 'YEARLY', 'DAILY', 'WEEKLY')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CommonMetadataType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CommonMetadataType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contact": obj.get("contact"),
            "databasis": obj.get("databasis"),
            "datasource": obj.get("datasource"),
            "description": obj.get("description"),
            "lastUpdate": obj.get("lastUpdate"),
            "literature": obj.get("literature"),
            "note": obj.get("note"),
            "sridEPSG": obj.get("sridEPSG"),
            "updateInterval": obj.get("updateInterval")
        })
        return _obj


